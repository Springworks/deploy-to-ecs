"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = require("http");
const util_1 = require("util");
function generateId() {
    const alphabet = '0123456789abcdefghijklmnopqrstuvwxyz-_';
    const max = alphabet.length;
    let id = '';
    for (let i = 0; i < 10; i++) {
        id += alphabet.charAt(Math.floor(Math.random() * max));
    }
    return id;
}
exports.generateId = generateId;
function getStatusCode(code, cause) {
    if (typeof code === 'number' && code >= 400 && http_1.STATUS_CODES[code]) {
        return code;
    }
    if (cause) {
        if (cause.output && cause.output.statusCode) {
            return getStatusCode(cause.output.statusCode, null);
        }
        if (isJoi(cause)) {
            return 422;
        }
    }
    return 500;
}
exports.getStatusCode = getStatusCode;
function getRootErrorId(root_error_id, cause) {
    if (typeof root_error_id === 'string' && root_error_id.length > 5) {
        return root_error_id;
    }
    if (cause) {
        return getRootErrorId(cause.root_error_id, undefined);
    }
    return undefined;
}
exports.getRootErrorId = getRootErrorId;
function isJoi(error) {
    const is_validation_error = error instanceof Error && error.name === 'ValidationError';
    if (!is_validation_error) {
        return false;
    }
    return is_validation_error && Array.isArray(error.details);
}
exports.isJoi = isJoi;
function toStringDebug() {
    const has_annotate = typeof this.annotate === 'function';
    const details = has_annotate ? this.annotate() : util_1.format('    %j', this.output.payload);
    return `Error: ${this.code} ${this.message}:\n${details}`;
}
exports.toStringDebug = toStringDebug;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ludGVybmFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUFvQztBQUNwQywrQkFBOEI7QUFFOUIsU0FBZ0IsVUFBVTtJQUN4QixNQUFNLFFBQVEsR0FBRyx3Q0FBd0MsQ0FBQztJQUMxRCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0lBQzVCLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUNaLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDM0IsRUFBRSxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUN4RDtJQUNELE9BQU8sRUFBRSxDQUFDO0FBQ1osQ0FBQztBQVJELGdDQVFDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLElBQVMsRUFBRSxLQUFVO0lBQ2pELElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLElBQUksSUFBSSxHQUFHLElBQUksbUJBQVksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNqRSxPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsSUFBSSxLQUFLLEVBQUU7UUFDVCxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDM0MsT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDckQ7UUFDRCxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNoQixPQUFPLEdBQUcsQ0FBQztTQUNaO0tBQ0Y7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFiRCxzQ0FhQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxhQUFrQixFQUFFLEtBQVU7SUFDM0QsSUFBSSxPQUFPLGFBQWEsS0FBSyxRQUFRLElBQUksYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDakUsT0FBTyxhQUFhLENBQUM7S0FDdEI7SUFDRCxJQUFJLEtBQUssRUFBRTtRQUNULE9BQU8sY0FBYyxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDdkQ7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBUkQsd0NBUUM7QUFFRCxTQUFnQixLQUFLLENBQUMsS0FBVTtJQUM5QixNQUFNLG1CQUFtQixHQUFHLEtBQUssWUFBWSxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxpQkFBaUIsQ0FBQztJQUN2RixJQUFJLENBQUMsbUJBQW1CLEVBQUU7UUFDeEIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELE9BQU8sbUJBQW1CLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0QsQ0FBQztBQU5ELHNCQU1DO0FBRUQsU0FBZ0IsYUFBYTtJQUMzQixNQUFNLFlBQVksR0FBRyxPQUFPLElBQUksQ0FBQyxRQUFRLEtBQUssVUFBVSxDQUFDO0lBQ3pELE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkYsT0FBTyxVQUFVLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sTUFBTSxPQUFPLEVBQUUsQ0FBQztBQUM1RCxDQUFDO0FBSkQsc0NBSUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTVEFUVVNfQ09ERVMgfSBmcm9tICdodHRwJztcbmltcG9ydCB7IGZvcm1hdCB9IGZyb20gJ3V0aWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVJZCgpOiBzdHJpbmcge1xuICBjb25zdCBhbHBoYWJldCA9ICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXotXyc7XG4gIGNvbnN0IG1heCA9IGFscGhhYmV0Lmxlbmd0aDtcbiAgbGV0IGlkID0gJyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgIGlkICs9IGFscGhhYmV0LmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtYXgpKTtcbiAgfVxuICByZXR1cm4gaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGF0dXNDb2RlKGNvZGU6IGFueSwgY2F1c2U6IGFueSk6IG51bWJlciB7XG4gIGlmICh0eXBlb2YgY29kZSA9PT0gJ251bWJlcicgJiYgY29kZSA+PSA0MDAgJiYgU1RBVFVTX0NPREVTW2NvZGVdKSB7XG4gICAgcmV0dXJuIGNvZGU7XG4gIH1cbiAgaWYgKGNhdXNlKSB7XG4gICAgaWYgKGNhdXNlLm91dHB1dCAmJiBjYXVzZS5vdXRwdXQuc3RhdHVzQ29kZSkge1xuICAgICAgcmV0dXJuIGdldFN0YXR1c0NvZGUoY2F1c2Uub3V0cHV0LnN0YXR1c0NvZGUsIG51bGwpO1xuICAgIH1cbiAgICBpZiAoaXNKb2koY2F1c2UpKSB7XG4gICAgICByZXR1cm4gNDIyO1xuICAgIH1cbiAgfVxuICByZXR1cm4gNTAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um9vdEVycm9ySWQocm9vdF9lcnJvcl9pZDogYW55LCBjYXVzZTogYW55KTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgaWYgKHR5cGVvZiByb290X2Vycm9yX2lkID09PSAnc3RyaW5nJyAmJiByb290X2Vycm9yX2lkLmxlbmd0aCA+IDUpIHtcbiAgICByZXR1cm4gcm9vdF9lcnJvcl9pZDtcbiAgfVxuICBpZiAoY2F1c2UpIHtcbiAgICByZXR1cm4gZ2V0Um9vdEVycm9ySWQoY2F1c2Uucm9vdF9lcnJvcl9pZCwgdW5kZWZpbmVkKTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNKb2koZXJyb3I6IGFueSk6IGJvb2xlYW4ge1xuICBjb25zdCBpc192YWxpZGF0aW9uX2Vycm9yID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnJvci5uYW1lID09PSAnVmFsaWRhdGlvbkVycm9yJztcbiAgaWYgKCFpc192YWxpZGF0aW9uX2Vycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc192YWxpZGF0aW9uX2Vycm9yICYmIEFycmF5LmlzQXJyYXkoZXJyb3IuZGV0YWlscyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1N0cmluZ0RlYnVnKCk6IHN0cmluZyB7XG4gIGNvbnN0IGhhc19hbm5vdGF0ZSA9IHR5cGVvZiB0aGlzLmFubm90YXRlID09PSAnZnVuY3Rpb24nO1xuICBjb25zdCBkZXRhaWxzID0gaGFzX2Fubm90YXRlID8gdGhpcy5hbm5vdGF0ZSgpIDogZm9ybWF0KCcgICAgJWonLCB0aGlzLm91dHB1dC5wYXlsb2FkKTtcbiAgcmV0dXJuIGBFcnJvcjogJHt0aGlzLmNvZGV9ICR7dGhpcy5tZXNzYWdlfTpcXG4ke2RldGFpbHN9YDtcbn1cbiJdfQ==