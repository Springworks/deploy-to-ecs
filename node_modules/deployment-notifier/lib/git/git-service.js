'use strict';

var internals = {};

exports.create = function (child_process) {
  return {
    getChangesBetweenTags: internals.getChangesBetweenTags.bind(null, { child_process: child_process }),
    getLatestAuthorName: internals.getLatestAuthorName.bind(null, { child_process: child_process })
  };
};

internals.getChangesBetweenTags = function (_ref, from_tag_name) {
  var child_process = _ref.child_process;
  var to_tag_name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'HEAD';

  var git_command_args = ['log', '--pretty=format:"- %s"', from_tag_name + '..' + to_tag_name, '--no-merges', '--reverse'];
  return internals.executeCommand(child_process, git_command_args).catch(function (err) {
    console.error('getChangesBetweenTags failed:', err);
    throw err;
  });
};

internals.getLatestAuthorName = function (_ref2) {
  var child_process = _ref2.child_process;

  var git_command_args = ['log', '--pretty=format:%an', '-1'];
  return internals.executeCommand(child_process, git_command_args).catch(function (err) {
    console.error('getLatestAuthorName failed:', err);
    throw err;
  });
};

internals.executeCommand = function (child_process, git_command_args) {
  return new Promise(function (resolve, reject) {
    var spawned_process = child_process.spawn('git', git_command_args);
    var stdout_str = '';

    spawned_process.stdout.on('data', function (data) {
      stdout_str += internals.unquotedString(data);
    });

    spawned_process.on('close', function (code) {
      if (code > 0) {
        reject(new Error('executeCommand returned code ' + code));
        return;
      }
      resolve(stdout_str);
    });

    spawned_process.on('error', reject);
    spawned_process.stderr.on('data', function (data) {
      reject(new Error(data));
    });
  });
};

internals.unquotedString = function (buffer_or_str) {
  var string = String(buffer_or_str);
  var replaced_surrounding_quotes = string.split('\n').map(function (str) {
    return str.replace(/(^")|("$)/g, '');
  }).join('\n');
  return replaced_surrounding_quotes;
};

/* istanbul ignore else */
if (process.env.NODE_ENV === 'test') {
  exports.internals = internals;
}