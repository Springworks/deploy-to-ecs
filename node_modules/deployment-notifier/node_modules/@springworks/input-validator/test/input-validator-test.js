'use strict';

const validator = require('..');
const joi = validator.joi;

describe('test/input-validator-test.js', () => {

  describe('validateSchema', () => {

    const schema = joi.object().required().keys({
      string_val: joi.string().required(),
      number_val: joi.number().optional(),
      date_val: joi.date().optional(),
      object_id: validator.objectId().optional(),
    });

    it('should validate with a joi schema', () => {
      const validated = validator.validateSchema({
        string_val: 'foo',
        number_val: 1,
      }, schema);
      validated.should.have.keys(['string_val', 'number_val']);
    });

    it('should cast values based on schema', () => {
      const d = new Date();
      const validated = validator.validateSchema({
        string_val: 'foo',
        number_val: '1',
        date_val: d.toISOString(),
      }, schema);
      validated.number_val.should.equal(1);
      validated.date_val.toISOString().should.equal(d.toISOString());
    });

    it('should validate ObjectId strings', () => {
      const validated = validator.validateSchema({
        string_val: 'foo',
        object_id: '53fbf4615c3b9f41c381b6a3',
      }, schema);
      validated.should.have.keys(['string_val', 'object_id']);
    });

    it('should describe why an object id is invalid', () => {
      let error;
      try {
        validator.validateSchema({ string_val: 'foo', object_id: 'x' }, schema);
      }
      catch (err) {
        error = err;
      }
      error.should.match({
        output: {
          payload: {
            details: [
              { message: '"object_id" with value "x" fails to match the required pattern: /^[0-9a-fA-F]{24}$/' },
            ],
          },
        },
      });
    });

    it('should throw an error with code 422', () => {
      let error;
      try {
        validator.validateSchema({}, schema);
      }
      catch (err) {
        error = err;
      }
      error.code.should.eql(422);
    });

    it('should throw if passed unknown parameters', () => {
      let error;
      try {
        validator.validateSchema({
          string_val: 'foo',
          number_val: 1,
          extra_key: 'bar',
        }, schema);
      }
      catch (err) {
        error = err;
      }
      error.should.match({
        output: {
          payload: {
            details: [
              { message: '"extra_key" is not allowed' },
            ],
          },
        },
      });
    });

    it('should throw error when invalid parameters are given', () => {
      let error;
      try {
        validator.validateSchema({
          string_val: 'foo',
          number_val: 'fubar',
          date_val: 'fubar_date',
          object_id: 'invalid_object_id',
        }, schema);
      }
      catch (err) {
        error = err;
      }
      error.should.match({
        output: {
          payload: {
            details: [
              { message: '"number_val" must be a number' },
              { message: '"date_val" must be a number of milliseconds or valid date string' },
              { message: '"object_id" with value "invalid_object_id" fails to match the required pattern: /^[0-9a-fA-F]{24}$/' },
            ],
          },
        },
      });
    });

    it('should throw error when required parameter is missing', () => {
      let error;
      try {
        validator.validateSchema({
          number_val: 1,
        }, schema);
      }
      catch (err) {
        error = err;
      }
      error.should.match({
        output: {
          payload: {
            details: [
              { message: '"string_val" is required' },
            ],
          },
        },
      });
    });

  });

});
