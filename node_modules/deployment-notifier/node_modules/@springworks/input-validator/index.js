'use strict';

const joi = require('joi');
const createError = require('@springworks/error-factory').createError;
const defaults = require('lodash.defaults');

const OBJECTID_REGEX = /^[0-9a-fA-F]{24}$/;


exports.joi = joi;


exports.objectId = function() {
  return joi.string().regex(OBJECTID_REGEX);
};


exports.validateSchema = validateSchema;


/**
 * validates given parameters based on schema.
 *
 * @throws {Error} If validation fails.
 * @param  {Mixed}    params            Parameters to validate.
 * @param  {Object}   schema            The schema to validate against. (Joi)
 * @param  {String=}  opt_resource_name Optional error resource name.
 * @param  {Object=}  opt_options       Override options for the validator. (Joi)
 * @return {Object}                     The validated object.
 */
function validateSchema(params, schema, opt_resource_name, opt_options) {
  const default_options = {
    abortEarly: false,
    stripUnknown: false,
    convert: true,
    presence: 'optional',
  };
  const options = opt_options ? defaults({}, opt_options, default_options) : default_options;
  const validated = joi.validate(params, schema, options);

  if (validated.error) {
    throw createError({ message: 'Validation Failed', cause: validated.error });
  }

  return validated.value;
}


// Define __esModule for use with `import`
Object.defineProperty(exports, '__esModule', { value: true });
