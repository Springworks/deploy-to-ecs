'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = extendWithDefaults;

var _lodash = require('lodash');

var _config = require('./defaults/config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mergeEnvironment(supplied, base) {
  const base_by_key = (0, _lodash.keyBy)(base, 'name');
  const supplied_by_key = (0, _lodash.keyBy)(supplied, 'name');
  const merged = (0, _lodash.merge)({}, base_by_key, supplied_by_key);
  return (0, _lodash.values)(merged);
}

function mergeArrays(supplied, base) {
  const count = Math.max(supplied.length, base.length);
  const result = [];
  for (let i = 0; i < count; i++) {
    if (!supplied[i]) {
      result.push(base[i]);
      continue;
    }

    const merged = (0, _lodash.mergeWith)({}, base[i], supplied[i], (obj, src, key) => {
      if (key === 'logConfiguration' && src) {
        return src;
      }

      if (key === 'environment' && obj && src) {
        return mergeEnvironment(src, obj);
      }

      return undefined;
    });

    result.push(merged);
  }

  return result;
}

function extendWithDefaults(config) {
  const service_name = config.service.serviceName;
  const default_config = (0, _config2.default)(service_name);

  const extended_config = (0, _lodash.mergeWith)({}, default_config, config, (obj, src, key) => {
    if (key === 'containerDefinitions' && obj && src) {
      return mergeArrays(src, obj);
    }

    return undefined;
  });

  return extended_config;
}