'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getDefault;
function getDefault(service_name) {
  return {
    service: {
      deploymentConfiguration: {
        maximumPercent: 200,
        minimumHealthyPercent: 50
      },
      desiredCount: 2,
      serviceName: service_name,
      taskDefinition: service_name,
      placementStrategy: [{
        field: 'attribute:ecs.availability-zone',
        type: 'spread'
      }]
    },
    taskDefinition: {
      containerDefinitions: [{
        name: service_name,
        image: `403799762630.dkr.ecr.eu-west-1.amazonaws.com/${service_name}`,
        memoryReservation: 200,
        cpu: 50,
        user: 'node',
        environment: [{
          name: 'NODE_ENV',
          value: 'production'
        }, {
          name: 'NEW_RELIC_LICENSE_KEY',
          value: process.env.NEW_RELIC_LICENSE_KEY
        }, {
          name: 'NEW_RELIC_HIGH_SECURITY',
          value: 'true'
        }, {
          name: 'NEW_RELIC_EVENT_INSERT_KEY',
          value: process.env.NEW_RELIC_EVENT_INSERT_KEY
        }, {
          name: 'NEW_RELIC_DISTRIBUTED_TRACING_ENABLED',
          value: 'true'
        }, {
          name: 'NEW_RELIC_LOG',
          value: 'stdout'
        }, {
          name: 'NEW_RELIC_LOG_LEVEL',
          value: 'fatal'
        }, {
          name: 'AWS_REGION',
          value: 'eu-west-1' // This tool is only used in eu-west-1, so this is safe
        }, {
          name: 'TS_NODE_TRANSPILE_ONLY',
          value: 'true' // This lowers memory usage significantly  for ts-node applications
        }],
        logConfiguration: {
          logDriver: 'splunk',
          options: {
            'splunk-url': 'https://splunk.internal.machinetohuman.com:8088',
            'splunk-verify-connection': 'false',
            'splunk-token': process.env.SPLUNK_TOKEN,
            'splunk-insecureskipverify': 'true',
            'splunk-format': 'json',
            'splunk-source': service_name
          }
        },
        systemControls: [{
          namespace: 'net.ipv4.tcp_keepalive_time',
          value: '120'
        }]
      }],
      family: service_name
    },
    applicationScaling: {
      serviceScalingTarget: {
        MaxCapacity: 10,
        MinCapacity: 2,
        RoleARN: 'arn:aws:iam::403799762630:role/cloud-EcsStack-1NK6UP55WFL2S-EcsElbIamrole-2AC9NPU5QTA6'
      }
    }
  };
}