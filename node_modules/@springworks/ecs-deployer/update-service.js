'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deploy = deploy;

var _inputValidator = require('@springworks/input-validator');

var _configureApplicationAutoScaling = require('./configure-application-auto-scaling');

var _ecsCreator = require('./ecs-creator');

var ecs_creator = _interopRequireWildcard(_ecsCreator);

var _extendWithDefaults = require('./extend-with-defaults');

var _extendWithDefaults2 = _interopRequireDefault(_extendWithDefaults);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _fileReader = require('./util/file-reader');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const image_name_regexp = /^([0-9]{12}\.dkr\.ecr\.(us-east-1|us-east-2|us-west-1|us-west-2|ca-central-1|eu-west-1|eu-central-1|eu-west-2|ap-northeast-1|ap-northeast-2|ap-southeast-1|ap-southeast-2|ap-south-1|sa-east-1)\.amazonaws\.com\/([0-9a-z]+)([0-9a-z_\-/]*([0-9a-z]+)))$/;
const deploy_params_schema = _inputValidator.joi.object().keys({
  image_tag: _inputValidator.joi.string().required(),
  configuration_file_name: _inputValidator.joi.string().required()
});

function registerTaskDefinition(task_definition, ecs) {
  return ecs.registerTaskDefinition(task_definition).promise();
}

function updateService(service, ecs) {
  const params = {
    cluster: service.cluster,
    service: service.serviceName,
    taskDefinition: service.taskDefinition,
    deploymentConfiguration: service.deploymentConfiguration
  };
  return ecs.updateService(params).promise();
}

function createService(service, ecs) {
  return ecs.createService(service).promise();
}

async function createOrUpdateService(service, ecs) {
  const params = {
    services: [service.serviceName]
  };

  if (service.cluster) {
    params.cluster = service.cluster;
  }

  const data = await ecs.describeServices(params).promise();

  if (data.failures && data.failures[0] && data.failures[0].reason === 'MISSING' || data.services && data.services[0] && data.services[0].status !== 'ACTIVE') {
    return createService(service, ecs);
  }
  return updateService(service, ecs);
}

function validateParams(params) {
  return (0, _inputValidator.validateSchema)(params, deploy_params_schema);
}

function updateImageName(task_definition, image_tag) {
  if (!image_name_regexp.test(task_definition.containerDefinitions[0].image)) {
    throw new Error('Invalid image name format');
  }
  const updated_task_definition = JSON.parse(JSON.stringify(task_definition));
  updated_task_definition.containerDefinitions[0].image += `:${image_tag}`;
  return updated_task_definition;
}

async function deploy(params) {
  try {
    const valid_params = validateParams(params);
    const config = (0, _extendWithDefaults2.default)((await (0, _fileReader.readJsonFile)(`./${params.configuration_file_name}`)));

    const ecs = ecs_creator.createEcsApi();
    const { service, taskDefinition, applicationScaling } = config;
    const updated_task_definition = updateImageName(taskDefinition, valid_params.image_tag);
    await registerTaskDefinition(updated_task_definition, ecs);
    const data = await createOrUpdateService(service, ecs);
    await (0, _configureApplicationAutoScaling.configureApplicationAutoScaling)(data.service, applicationScaling);
  } catch (err) {
    _logger2.default.trace(err);
    throw err;
  }
}