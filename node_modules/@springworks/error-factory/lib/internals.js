'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deprecatedJsonProperty = exports.deprecatedBodyProperty = exports.deprecatedStatusCodeProperty = undefined;
exports.createLogPayloadDescriptor = createLogPayloadDescriptor;
exports.getOutputPayload = getOutputPayload;
exports.patternmatchLegacyArgs = patternmatchLegacyArgs;

var _util = require('util');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function createLogPayloadDescriptor() {
  let log_payload;
  return {
    get: () => log_payload,
    set: (0, _util.deprecate)(value => {
      log_payload = log_payload || [];
      log_payload.push(value);
    }, 'do not set error.payload'),
    enumerable: true
  };
}

function getOutputPayload() {
  return this.output.payload;
}

function patternmatchLegacyArgs(args) {
  const n = args.length;
  if (n === 0) {
    return {};
  }

  const a = args[0];
  if (n === 1) {
    if (typeof a === 'number') {
      return { code: a };
    }
    if (a instanceof Error) {
      // The old function was sometimes misused and an error was passed instead of a message
      return { cause: a };
    }
    return {};
  }

  const b = args[1];
  if (n === 2) {
    if (b instanceof Error) {
      return { code: a, cause: b };
    }
    return { code: a, message: String(b) };
  }

  return { code: a, message: _util.format.apply(undefined, [String(b)].concat(_toConsumableArray(args.slice(2)))) };
}

function statusCodePropertyGetter() {
  return this.code;
}

const deprecatedStatusCodeProperty = exports.deprecatedStatusCodeProperty = { get: (0, _util.deprecate)(statusCodePropertyGetter, 'error.statusCode is deprecated, use error.code'), enumerable: true };
const deprecatedBodyProperty = exports.deprecatedBodyProperty = { get: (0, _util.deprecate)(getOutputPayload, 'error.body is deprecated'), enumerable: true };
const deprecatedJsonProperty = exports.deprecatedJsonProperty = { get: (0, _util.deprecate)(getOutputPayload, 'error.json is deprecated'), enumerable: true };